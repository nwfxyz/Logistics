}
if(Location == ""){
Location <- "Default Location"
}
if(Price == ""){
return(data.frame('New Entry' = 'Insert Price'))
}
if(CustID == ""){
return(data.frame('New Entry' = 'Insert CustID'))
}
RowFrame <- data.frame(
SID = SID,
Date = Date,
ProductID = ProductID,
Quantity = -as.numeric(Quantity),
Location = Location,
CustID = CustID,
Price = Price
)
colnames(PriceList) <- c('ProductID','ProductName','CostPrice')
InputRow <- merge(RowFrame,PriceList, all.x = T , all.y = F)
InputRow <- merge(InputRow,CustIn, all.x = T , all.y = F)
if(CostPrice != "From Price List"){
InputRow$CostPrice <- CostPrice
}
if(is.na(InputRow$ProductName)){
stop(paste0("ProductID: [",ProductID,"] not found. Update Product List or Check Product ID."))
}
InputRow <- InputRow[c( "SID",
"Date",
"ProductID" ,
"ProductName",
"Quantity"  ,
"Location",
"Price",
"CustID",
"Customer",
'CostPrice')]
print(InputRow)
#Userinput 2
InputRow$Price <- format(InputRow$Price, nsmall =2)
print(Save)
if(Save == T){
LogFileUpdate <- rbind(LogIn,InputRow)
write.csv(LogFileUpdate,"LogsInput.csv", row.names = F)
if(Invoice != F){
assign(paste0("InvoiceRow",Invoice),value = InputRow,envir = Invoice.env)
}
return(paste("Successfully updated as SID: ",SID))
}
return(InputRow)
}
# Shiny_Sell(102220,100,'Desk',1000,1000,100,,,Save = T, Invoice = 1)
NewInvoice <- function(){
for(i in 1:5){
assign(paste0('InvoiceRow',i),value = data.frame(),envir = Invoice.env)
}
return("Invoice Data Cleared")
}
InvoicePrinting <- function(CustID,InvoiceNo)
{
TableInvoicePrint <- data.frame()
for(i in 1:5){
tmp <- get(paste0('InvoiceRow',i),envir = Invoice.env)
TableInvoicePrint <- rbind(TableInvoicePrint,tmp)
}
CustFile <- ReadCustFile()
Address <- CustFile[CustFile$CustID == CustID,'Address']
TableInvoicePrint <- cbind(TableInvoicePrint,Address,InvoiceNo)
print(TableInvoicePrint)
write.xlsx2(TableInvoicePrint,file = "InvoicePrinting.xlsx")
shell.exec(paste0(getwd(),"/","InvoicePrint.xlsx"))
return('Success')
}
DeleteSID_Shiny <- function(SID2, Show = F){
LogIn <- ReadLogFile(Sys.Date())
if(!SID2 %in% LogIn$SID){
return(paste("SID:",SID2,"does not exist
"))
} else{
if(Show == T){
return(LogIn[LogIn$SID == SID2,])
}
LogFileUpdate <- LogIn[!LogIn$SID == SID2,]
write.csv(LogFileUpdate,"LogsInput.csv", row.names = F)
return(paste("SID:",SID2,"successfully removed from data."))
}
}
#
DeleteSID_Shiny(170300079,Show = T)
DeleteSID_Shiny(170300079,Show = F)
DeleteSID_Shiny(170300079,Show = T)
#ui
library(shiny)
# setwd("C:/Users/userpv/Documents/Rwd/SMS")
# rm(list =ls())
setwd("C:/Users/userpv/Documents/Rwd/SMS/V2")
source('ShinyFunctions.R')
source('Call file.R')
Invoice.env <- new.env()
InvoiceTable <- ReadLogFile(Sys.Date())[0,]
NewInvoice()
ui <- shinyUI(
fluidPage(
titlePanel("Logistics SMS"),
tabsetPanel(
"Add Items",
### STOCK
tabPanel("Stock",
sidebarLayout(
sidebarPanel(
hr(),
textInput("ProductID", label = ("Product ID"),
value = "") ,
textInput("Quantity", label = ("Quantity"),
value = "")  ,
hr(),
textInput("Location", label = ("Location"),
value = "")   ,
hr(),
textInput("Date", label = ("Entry Date"),
value = Sys.Date())   ,
hr(),
textInput("CostPrice", label = ("Cost Price"),
value = "From Price List"),
actionButton("SaveButton", "Save")
),mainPanel(
tableOutput("stock1"),
textOutput("StockSuccess")
)
)),
tabPanel("Sell",
sidebarLayout(
sidebarPanel(
textInput("CustID", label = ("Customer ID"),
value = ""),
textInput("Sell_ProductID", label = ("Product ID"),
value = "") ,
textInput("Sell_Quantity", label = ("Quantity"),
value = "")  ,
hr(),
textInput("Sell_Location", label = ("Location"),
value = "")   ,
hr(),
textInput("Sell_Date", label = ("Entry Date"),
value = Sys.Date())   ,
hr(),
textInput("Sell_Price", label = ("Price"),
value = ""),
textInput("Sell_CostPrice", label = ("Cost Price"),
value = "From Price List"),
actionButton("Sell_SaveButton", "Sell")
),mainPanel(
tableOutput("sell1"),
textOutput("SellSuccess")
)
)),
tabPanel("Invoice",
sidebarLayout(
sidebarPanel(
textInput("ISell_Date", label = ("Entry Date"),
value = Sys.Date())   ,
hr(),
textInput("ICustID", label = ("Customer ID"),
value = ""),
textInput("InvoiceNo", label = "Invoice No: ",
value = "") ,
radioButtons("InvoiceRow", "Invoice Product:", list('Product 1' = 1,'Product 2' = 2, 'Product 3' = 3,"Product 4" = 4, "Product 5" = 5),
selected = 1) ,
textInput("ISell_ProductID", label = ("Product ID"),
value = "") ,
textInput("ISell_Quantity", label = ("Quantity"),
value = "")  ,
hr(),
textInput("ISell_Location", label = ("Location"),
value = "")   ,
hr(),
textInput("ISell_Price", label = ("Price"),
value = ""),
textInput("ISell_CostPrice", label = ("Cost Price"),
value = "From Price List"),
actionButton("ISell_SaveButton", "Add Product"),
hr(),
actionButton("I_PrintInvoice", "Print Invoice"),
hr(),
actionButton("I_NewInvoice", "New Invoice")
),mainPanel(
tableOutput("Invoice1"),
textOutput("Invoice1Success"),
tableOutput("InvoiceTable"),
textOutput('InvoicePrint'),
textOutput('InvoiceNew1')
)
)),
"Business Statistics",
tabPanel("Check Product"),
tabPanel("Business Summary"),
"-----",
tabPanel("Delete SID",
sidebarLayout(
sidebarPanel(
hr(),
numericInput("DeleteSID_Input", "SID", value = ""),
hr(),
actionButton("DeleteSID_Button", "Delete Entry")
),
mainPanel(
tableOutput("DeleteSID_Show"),
textOutput("DeleteSID_Result")
)
)
)
)
)
)
server <- shinyServer(function(input,output){
##Stock
stock1 <- reactive({
Shiny_Stock(input$ProductID,input$Quantity,input$Location,Date = input$Date, CostPrice = input$CostPrice, Save = F)
})
re <- eventReactive(input$SaveButton,{
Shiny_Stock(input$ProductID,input$Quantity,input$Location,Date = input$Date, CostPrice = input$CostPrice, Save = T)
})
output$stock1 <- renderTable({stock1()})
output$StockSuccess <- renderText({re()})
#######Stock End######
#####SELL####
sell1 <- reactive({
Shiny_Sell(input$Sell_ProductID,input$Sell_Quantity,input$Sell_Location,Date = input$Sell_Date,CustID = input$CustID, Price = input$Sell_Price, PriceList = PriceListDef,CostPrice = input$Sell_CostPrice,Save = F)
})
save_sell <- eventReactive(input$Sell_SaveButton,{
Shiny_Sell(input$Sell_ProductID,input$Sell_Quantity,input$Sell_Location,Date = input$Sell_Date,CustID = input$CustID, Price = input$Sell_Price,PriceList = PriceListDef,CostPrice = input$Sell_CostPrice, Save = T)
})
output$sell1 <- renderTable({sell1()})
output$SellSuccess <- renderText({save_sell()})
####Sell End########
##invoicing - send output to external environment, call from external environemtn
InvoiceRow <- reactive({
Shiny_Sell(input$ISell_ProductID,input$ISell_Quantity,input$ISell_Location,Date = input$ISell_Date,CustID = input$ICustID, Price = input$ISell_Price, PriceList = PriceListDef,CostPrice = input$ISell_CostPrice,Save = F, Invoice = F)
})
Save_InvoiceRow <- eventReactive( input$ISell_SaveButton,{
Shiny_Sell(input$ISell_ProductID,input$ISell_Quantity,input$ISell_Location,Date = input$ISell_Date,CustID = input$ICustID, Price = input$ISell_Price, PriceList = PriceListDef,CostPrice = input$ISell_CostPrice,Save = T, Invoice = input$InvoiceRow)
})
InvoiceNew1 <- eventReactive(input$I_NewInvoice,{NewInvoice()
})
InvoiceTable_Re <- eventReactive(list(input$ISell_SaveButton,input$I_NewInvoice),{InvoiceTable <- rbind(Invoice.env$InvoiceRow1,Invoice.env$InvoiceRow2,Invoice.env$InvoiceRow3,Invoice.env$InvoiceRow4,Invoice.env$InvoiceRow5)
print(InvoiceTable)})
InvoicePrint_Re <- eventReactive(input$I_PrintInvoice,{InvoicePrinting(input$ICustID,input$InvoiceNo)
})
output$Invoice1 <- renderTable({InvoiceRow()})
output$Invoice1Success <- renderText({Save_InvoiceRow()})
output$InvoiceTable <- renderTable({InvoiceTable_Re()})
output$InvoiceNew1 <- renderText({InvoiceNew1()})
output$InvoicePrint <- renderText({InvoicePrint_Re()})
# output$SellSuccess <- renderText({save_sell()})
####Sell End########
###Delete SID Start
#
#   numericInput("DeleteSID_Input", "SID", value = ""),
#
#   hr(),
#
#   actionButton("DeleteSID_Button", "Delete Entry")
# ),
# mainPanel(
#   tableOutput("DeleteSID_Show"),
#   textOutput("DeleteSID_Result")
#
DeleteSID_Show <- reactive({ DeleteSID_Shiny(input$DeleteSID_Input,Show = T)})
output$DeleteSID_Show <- renderTable({DeleteSID_Show()})
DeleteSID_Result <- eventReactive(input$DeleteSID_Button,{ DeleteSID_Shiny(input$DeleteSID_Input)})
output$DeleteSID_Result <- renderText({DeleteSID_Result()})
}
)
shinyApp(ui = ui , server = server)
source('~/Rwd/SMS/V2/ShinyFunctions.R', echo=TRUE)
ReadCustFile()
ReadCustFile
source('~/Rwd/SMS/V2/ShinyFunctions.R', echo=TRUE)
# Invoicing
#NewSell
Shiny_Stock <- function(ProductID, Quantity, Location, CostPrice = " ", Date = Sys.Date(), PriceList = PriceListDef,
Save = F, Invoice = F){
#UserInput
LogIn <- ReadLogFile(Date)
CustIn <- ReadCustFile()
SID <- GetSeriesID(Date,LogIn)
RowFrame <- data.frame(
SID = SID,
Date = Date,
ProductID = ProductID,
Quantity = Quantity,
Location = Location,
CustID = "B",
CostPrice = ''
)
if(ProductID == ""){
return(data.frame('New Entry' = 'Insert ProductID'))
}
if(Quantity == ""){
return(data.frame('New Entry' = 'Insert Quantity'))
}
if(Location == ""){
Location <- "Default Location"
}
colnames(PriceList) <- c('ProductID','ProductName','Price')
InputRow <- merge(RowFrame,PriceList, all.x = T , all.y = F)
InputRow <- merge(InputRow,CustIn, all.x = T , all.y = F)
if(is.na(InputRow$ProductName)){
stop(paste0("ProductID: [",ProductID,"] not found. Update Product List or Check Product ID."))
}
InputRow <- InputRow[c( "SID",
"Date",
"ProductID" ,
"ProductName",
"Quantity"  ,
"Location",
"Price",
"CustID",
"Customer",
'CostPrice')]
#Userinput 2
if(CostPrice == "From Price List"){
InputRow$CostPrice <- as.numeric(InputRow$Price)
} else {
InputRow$CostPrice <- as.numeric(CostPrice)
}
print(Save)
if(Save == T){
LogFileUpdate <- rbind(LogIn,InputRow)
write.csv(LogFileUpdate,"LogsInput.csv", row.names = F)
return(paste("Successfully updated as SID: ",SID))
}
return(InputRow)
}
Shiny_Sell <- function(ProductID, Quantity, Location, Price = " ",CostPrice, CustID = 100,Date = Sys.Date(), PriceList = PriceListDef,
Save = F, Invoice = F){
print(ProductID)
print(Quantity)
print(Location)
print(Price)
print(CostPrice)
print(CustID)
print(Date)
print(Save)
#UserInput
LogIn <- ReadLogFile(Date)
CustIn <- ReadCustFile()
SID <- GetSeriesID(Date,LogIn)
if(ProductID == ""){
return(data.frame('New Entry' = 'Insert ProductID'))
}
if(Quantity == ""){
return(data.frame('New Entry' = 'Insert Quantity'))
}
if(Location == ""){
Location <- "Default Location"
}
if(Price == ""){
return(data.frame('New Entry' = 'Insert Price'))
}
if(CustID == ""){
return(data.frame('New Entry' = 'Insert CustID'))
}
RowFrame <- data.frame(
SID = SID,
Date = Date,
ProductID = ProductID,
Quantity = -as.numeric(Quantity),
Location = Location,
CustID = CustID,
Price = Price
)
colnames(PriceList) <- c('ProductID','ProductName','CostPrice')
InputRow <- merge(RowFrame,PriceList, all.x = T , all.y = F)
InputRow <- merge(InputRow,CustIn, all.x = T , all.y = F)
if(CostPrice != "From Price List"){
InputRow$CostPrice <- CostPrice
}
if(is.na(InputRow$ProductName)){
stop(paste0("ProductID: [",ProductID,"] not found. Update Product List or Check Product ID."))
}
InputRow <- InputRow[c( "SID",
"Date",
"ProductID" ,
"ProductName",
"Quantity"  ,
"Location",
"Price",
"CustID",
"Customer",
'CostPrice')]
print(InputRow)
#Userinput 2
InputRow$Price <- format(InputRow$Price, nsmall =2)
print(Save)
if(Save == T){
LogFileUpdate <- rbind(LogIn,InputRow)
write.csv(LogFileUpdate,"LogsInput.csv", row.names = F)
if(Invoice != F){
assign(paste0("InvoiceRow",Invoice),value = InputRow,envir = Invoice.env)
}
return(paste("Successfully updated as SID: ",SID))
}
return(InputRow)
}
# Shiny_Sell(102220,100,'Desk',1000,1000,100,,,Save = T, Invoice = 1)
NewInvoice <- function(){
for(i in 1:5){
assign(paste0('InvoiceRow',i),value = data.frame(),envir = Invoice.env)
}
return("Invoice Data Cleared")
}
InvoicePrinting <- function(CustID,InvoiceNo)
{
TableInvoicePrint <- data.frame()
for(i in 1:5){
tmp <- get(paste0('InvoiceRow',i),envir = Invoice.env)
TableInvoicePrint <- rbind(TableInvoicePrint,tmp)
}
CustFile <- ReadCustFile()
Address <- CustFile[CustFile$CustID == CustID,'Address']
TableInvoicePrint <- cbind(TableInvoicePrint,Address,InvoiceNo)
print(TableInvoicePrint)
write.xlsx2(TableInvoicePrint,file = "InvoicePrinting.xlsx")
shell.exec(paste0(getwd(),"/","InvoicePrint.xlsx"))
return('Success')
}
DeleteSID_Shiny <- function(SID2, Show = F){
LogIn <- ReadLogFile(Sys.Date())
print(SID2)
if(SID2 == "SID"){
return(LogIn[(nrow(LogIn)-10):nrow(LogIn),])
}
if(!SID2 %in% LogIn$SID){
return(paste("SID:",SID2,"does not exist
"))
} else{
if(Show == T){
return(LogIn[LogIn$SID == SID2,])
}
LogFileUpdate <- LogIn[!LogIn$SID == SID2,]
write.csv(LogFileUpdate,"LogsInput.csv", row.names = F)
return(paste("SID:",SID2,"successfully removed from data."))
}
}
#
AddCustomer <- function(CustID,Customer,Address,Save = F){
CustFile <- ReadCustFile()
InputRow <- data.frame(Customer = Customer,CustID = CustID,Address = Address)
CustFileNew <- rbind(CustFile,InputRow)
if(Save == F){
return(InputRow)
} else {
write.csv(CustFileNew,"CustomerList.csv",header = T)
return("Customer added.")
}
}
print(\n)
print(\n)
print('\n')
print('/n')
print('\n')
print('a \n a')
print('a /n a')
ReadCustFile()
ReadCustFiel
ReadCustFle
ReadCustFile
write.csv
library(DT)
install.packages("DT")
prettyNum()
prettyNum(10000000000)
prettyNum(10000000000, big.mark = ",")
source('~/Rwd/SMS/V2/ShinyFunctions.R', echo=TRUE)
prettyNum(10000000000.00, big.mark = ",")
prettyNum(10000000000.00, big.mark = ",",drop0trailing = F)
prettyNum(10000000000.00, big.mark = ",",drop0trailing = T)
prettyNum(10000000000.00, big.mark = ",",small.mark = ".")
prettyNum(10000000000.00, big.mark = ",",small.mark = ".",small.interval = 2)
prettyNum(10000.00, big.mark = ",",small.mark = ".",small.interval = 2)
prettyNum(10000.00, big.mark = ",",small.mark = ".",preserve.width = T)
prettyNum(10000.00, big.mark = ",",small.mark = ".",preserve.width = 2)
prettyNum(10000.00, big.mark = ",",small.mark = ".",preserve.width = NULL)
prettyNum(10000.00, big.mark = ",",small.mark = ".",preserve.width = "individual")
prettyNum(10000.00, big.mark = ",",small.mark = ".",drop0trailing = F)
prettyNum(10000.00, big.mark = ",",small.mark = ".",drop0trailing = T)
?prettyNum
formatC(1000,big.mark = ",",digits = 2)
formatC(1000,big.mark = ",",digits = 2, format = ''g)
formatC(1000,big.mark = ",",digits = 2, format = 'g')
formatC(1000,big.mark = ",",digits = 2, format = 'fg')
formatC(1000,big.mark = ",",digits = 3, format = 'fg')
formatC(1000,big.mark = ",",nsmall = 2, format = 'fg')
formatC(1000,big.mark = ",", format = 'fg')
formatC(1000.00,big.mark = ",", format = 'fg')
formatC(1000.00,big.mark = ",", format = 'fg', width = 2)
formatC(1000.00,big.mark = ",", format = 'fg', width = 10)
formatC(1000.00,big.mark = ",", format = 'fg', digits = 10)
formatC(1000.00,big.mark = ",", format = 'fg', digits =NULL)
formatC(1000.00,big.mark = ",", format = 'fg')
formatC(1000.00,big.mark = ",)
formatC(1000.00,big.mark = ",)
formatC(1000.00,big.mark = ",")
format(1000.00,big.mark = ",", nsmall = 2)
format(1000,big.mark = ",", nsmall = 2)
source('~/Rwd/SMS/V2/ShinyFunctions.R', echo=TRUE)
format(100,nsmall = 2, big.mark = ",")
format(100,nsmall = 2, big.mark = ",")
format('100',nsmall = 2, big.mark = ",")
source('~/Rwd/SMS/V2/ShinyFunctions.R', echo=TRUE)
